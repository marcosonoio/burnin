#!/usr/bin/env bash

if [ "${EUID}" -ne 0 ]; then
  echo "This script must be run as root!" 1>&2
  exit 1
fi

# Gets the progress of a running SMART test as a string, or outputs nothing if
# no test is currently running.
function get_smart_progress {
  local device="${1}"

  smartctl -a "${device}" \
    | grep 'of test remaining' \
    | sed 's/^[[:blank:]]*//' \
    | sed 's/\.$//'
}

# Run a SMART test in offline mode and wait until it's done, printing remaining
# progress every minute.
function smart_test {
  local test_name="${1}"
  local device="${2}"

  smartctl --test="${test_name}" "${device}" > /dev/null

  # Wait for the progress remaining to disappear, signaling the end of the test.
  local result
  result="Running '${test_name}' SMART test on $(date)"
  while [ -n "${result}" ]; do
    echo "${result}"
    sleep 60
    result="$(get_smart_progress "${device}")"
  done
}

# Print the the report, power off the drive and remove the "run" file
function print_exit {
  local report="${1}"
  local dev="${2}"
  
  echo " " | tee -a "${report}"
  echo "END at $(date)" | tee -a "${report}"
  
  # print the report with margins (default printer)
  lpr -o cpi=20 -o page-left=1 -o page-right=1 -o page-top=20 "${report}"
  
  # power off the device
  echo 1 > "/sys/block/${dev}/device/delete"

  exit
}

# Run a succession of SMART tests and badblocks on a device, and output the
# final results when complete.
function burnin {
 
  local device="/dev/${1}"
  local dev="${1}"
  
  # exit if the device does not exist
  #if [ ! -b "${device}" ]; then echo "${device} DOES NOT EXISTS"; exit; fi
  
  # save a "run" file with the pid of this script and the name of the drive 
  echo "$$" "${dev}" > "${working_dir}/run/${dev}"
    
  # Aborting any running SMART tests on ${device}
  smartctl -X "${device}" > /dev/null
  
  # get serial number, model and size sector
  sn=$(smartctl -i "${device}" | grep "Serial Number" | cut -d ":" -f 2 | sed -e 's/^[ \t]*//')
  model=$(smartctl -i "${device}" | grep "Device Model" | cut -d ":" -f 2 | sed -e 's/^[ \t]*//')
  size_sector=$(hdparm -I "${device}" | awk '/Physical Sector size:/ {print $4}')
  
  # set filname of report and log
  report="${working_dir}/${sn}"
  badblocks_log="${working_dir}/${sn}_badblocks"
  
  # remove old file of the same drive
  if [ -f  "${report}" ] ; then rm "${report}" ; fi
  if [ -f  "${badblocks_log}" ] ; then rm "${badblocks_log}" ; fi
  
  # check if the drive is smart capable, and activate it if nothing
  if ( smartctl -i "${device}" | grep "SMART support is: Available" ); then
    smartctl --smart=on "${device}" > /dev/null
  else
    echo "SMART support is not Available" | tee -a "${report}"
    print_exit "${report}" "${dev}"
  fi
  
  # start the true test
  echo | tee -a "${report}"
  echo "START at $(date)" | tee -a "${report}"
  echo | tee -a "${report}"

  # save device maodel, serial number and the sector size
  echo "Device Model:   " "${model}" | tee -a  "${report}"
  echo "Serial Number:  " "${sn}" | tee -a "${report}"
  echo "Sector Size:    " "${size_sector}" | tee -a "${report}"

  # Unmount all partition of the device | maybe it is not necessary
  for n in "${device}"* ; do umount "$n" /dev/null 2>&1 ; done
  
  # Erase partiton table, MBR, ecc | maybe it is not necessary
  wipefs -a "${device}" > /dev/null
  
  # check if smart status is OK
  if ( smartctl -H "${device}" | grep "PASSED" ); then
    echo "SMART status:    OK!!!" | tee -a "${report}"
  else
    echo "SMART status:    FAIL!!!" | tee -a "${report}"
    print_exit "${report}" "${dev}"
  fi

  # start short selftest
  echo
  smart_test 'short' "${device}"
  
  # check if short test is OK
  if (smartctl -l selftest "${device}" | grep "# 1" | grep "Short" | grep "Completed without error" ); then
    echo "Short test:      OK!!!" | tee -a "${report}"
  else
    echo "Short test:      FAIL!!!" | tee -a "${report}"
    print_exit "${report}" "${dev}"
  fi

  # start conveyance selftest, if the drive is capable
  echo
  if ( smartctl -c "${device}" | grep "No Conveyance Self-test supported." ); then
    echo "Conveyance Self-test is not supported"
  else
    smart_test 'conveyance' "${device}"
    
    # check if conveyance test is OK
    if (smartctl -l selftest "${device}" | grep "# 1" | grep "Conveyance" | grep "Completed without error" ); then
      echo "Conveyance test: OK!!!" | tee -a "${report}"
    else
      echo "Conveyance test: FAIL!!!" | tee -a "${report}"
      print_exit "${report}" "${dev}"
    fi
  fi
  
  # start the long selftest
  echo
  smart_test 'long' "${device}"
  
  # check if long test is OK
  if (smartctl -l selftest "${device}" | grep "# 1" | grep "Extended" | grep "Completed without error" ); then
    echo "Extended test:   OK!!!" | tee -a "${report}"
  else
    echo "Extended test:   FAIL!!!" | tee -a "${report}"
    print_exit "${report}" "${dev}"
  fi

  # This section runs a _destructive_ write/read test on the device,
  # exercising its memory cells and attempting to cause an early failure.
  echo
  echo "Running destructive badblocks test on $(date):"
  echo "Badblocks test can take up to 10 hours"
  cache_size=$(hdparm -I /dev/sdb | awk '/buffer size/ {print $4}')
  if [ "${cache_size}" == "unknown" ]; then
	  blocks_num="1024"
  else
	  blocks_num=$(( cache_size * 1024 / 4 / size_sector ))
  fi
  badblocks -ws -b "${size_sector}" -c "${blocks_num}" "${device}" -o "${badblocks_log}"
  bad_blocks=$(wc -w <<< "${badblocks_log}")
  echo "$bad_blocks" | tee -a "${report}"
  echo "End of destructive badblocks test on $(date):"

  # run agarin long selftest
  echo
  smart_test 'long' "${device}"
  
  # check if second long test is OK
  if (smartctl -l selftest "${device}" | grep "# 1" | grep "Extended" | grep "Completed without error" ); then
    echo "2°Extended test: OK!!!" | tee -a "${report}"
  else
    echo "2°Extended test: FAIL!!!" | tee -a "${report}"
    print_exit "${report}" "${dev}"
  fi

  # get SMART attributes
  echo
  echo "SMART Attributes:" | tee -a "${report}"
  echo " " | tee -a "${report}"

  mapfile -t attributes < <(smartctl -A "${device}" | sed -n '/ID/,$p' | sed 1d)
  for line in "${!attributes[@]}"
  do
    IFS=' ' read -r -a att_rows <<< "${attributes[line]}"
    printf "%25s %s\n" "${att_rows[1]}" "${att_rows[9]}" | tee -a "${report}"
  done
  
  # Speed test
  # write
  write_speed=$(dd if=/dev/zero of="${device}" bs=8k count=2621440 2>&1 | awk '/copied/ {print $10 " "  $11}')
  echo "Write Speed:     " "${write_speed}" | tee -a "${report}"
  # read
  sync && echo 3 > /proc/sys/vm/drop_caches
  read_speed=$(dd if="${device}" of=/dev/null bs=8k count=2621440 2>&1 | awk '/copied/ {print $10 " "  $11}')
  echo "Read Speed:      " "${read_speed}" | tee -a "${report}"
  
  # print the report and exit
  print_exit "${report}" "${dev}"

}

if [ -z "${1}" ]; then
  echo "A device is required as the first argument."
  exit 1
fi

# get the path to store report file, log and "run"
working_dir="$(cat /etc/burnin)"

# Run the burn-in and see how long it takes, just for fun.
time burnin "${1}"
