#!/usr/bin/env bash

if [ "${EUID}" -ne 0 ]; then
  echo "This script must be run as root!" 1>&2
  exit 1
fi

# progress bar https://github.com/fearside/ProgressBar/blob/master/progressbar.sh
function ProgressBar {
  _progressArr="{$1}"
  _progress=$(awk '{print $2}' <<< "${_progressArr}")
  _test=$(awk '{print $3}' <<< "${_progressArr}")
  # Process data
  # let _done=${_progress[1]}*5/10
  _done=$(( _progress[1] * 5 / 10 ))
  # let _left=50-$_done
  _left=$(( 50 - _done ))
  # Build progressbar string lengths
  _done=$(printf "%${_done}s")
  _left=$(printf "%${_left}s")

  # 1.2 Build progressbar strings and print the ProgressBar line
  # 1.2.1 Output example:
  # 1.2.1.1 Progress : [########################################] 100%
  printf "Progress : [${_done// /#}${_left// /-}] ${_progress}%% - Run: ${TC_BLD}${_test}${TC_RESET}\\n"

}

#set color
TC_RESET=$'\x1B[0m'
TC_BG=$'\x1B[0;30;47m'
TC_BLD=$'\x1B[0;1m'
CLREOL=$'\x1B[K'

# set physical connection of the motherboard to control
conn=(ata1 ata2 ata3 ata4 ata5 ata6)

while :
do
    printf "\\033c"
    echo
    echo  "${TC_BG}BURNIN HDD CONTROL PANEL${CLREOL}"
    echo
    i=1
    for sata in ${conn[*]}
    do
        dev[$i]=$(lsscsi -v | grep -B 1 "${sata}" | head -1 | awk 'NF>1{print $NF}' | cut -d "/" -f 3)
        if [ -n "${dev[${i}]}" ]; then
	    since=$(systemctl status burnin@"${dev[$i]}".service | grep "active (running)" | cut -d ")" -f 2 | sed -e 's/^[ \t]*//')
            if [ -n "${since}" ] ; then
              sn=$(smartctl -i /dev/"${dev[$i]}" | grep "Serial Number" | cut -d ":" -f 2 | sed -e 's/^[ \t]*//')
              echo "${TC_RESET}#${i} /dev/${dev[$i]} - ${sn}${TC_RESET} is running ${since}"
              pid[$i]=$(systemctl status burnin@"${dev[$i]}".service | grep "Main PID" | awk '{print $3}')
              log[$i]=$(journalctl -u  burnin@"${dev[$i]}".service  _PID="${pid[$i]}" -e -o json | jq -M -r '. | {time: .__REALTIME_TIMESTAMP, msg: .MESSAGE}')
	      progress=$(jq -r -M 'select(.msg | contains("%progress%")) | "\(.msg)"' <<< "${log[$i]}" | tail -1)
              ProgressBar "${progress}"
	      echo
            fi
        else
            echo "${TC_BLD}#${i}${TC_RESET} empty or finished"
	    echo
        fi
        (( i++ ))
    done
    echo
    read -r -t 10 -p $'Press Enter to refresh, or insert the number of the the device to show the log: ' num
    case $num in
      1|2|3|4|5|6)
        if [ -n "${dev[$num]}" ]; then
          printf "\\033c"
	  jq -r -M 'select(.msg | contains("%progress%") | not) | "\(.time | tonumber / 1000000) \(.msg)"' <<< "${log[$num]}" | awk '{ $1=strftime("%b %d %T", $1); print $0; fflush(); }' | less +G
        fi
        ;;
     "1stop"|"2stop"|"3stop"|"4stop"|"5stop"|"6stop")
     	if [ -n "${dev[${num:0:1}]}" ]; then
	  printf "\\033c"
	  if ( systemctl stop burnin@"${dev[${num:0:1}]}".service ); then
	     echo
	     echo "STOPPED!!!"
	  else
	     echo
	     echo "Some problem to STOP"
	  fi
	fi
	echo
	echo
	read -r -p 'Press Enter to continue'
	;;
      "quit")
         exit
       ;;
    esac
    echo
done
