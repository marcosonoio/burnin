#!/usr/bin/env bash

# progress bar https://github.com/fearside/ProgressBar/blob/master/progressbar.sh
function ProgressBar {
# Process data
	let _done=${1}*4/10
	let _left=50-$_done
# Build progressbar string lengths
	_done=$(printf "%${_done}s")
	_left=$(printf "%${_left}s")

# 1.2 Build progressbar strings and print the ProgressBar line
# 1.2.1 Output example:
# 1.2.1.1 Progress : [########################################] 100%
printf "\rProgress : [${_done// /#}${_left// /-}] ${1}%%"

}

# estimated pogress bar value, based on estimate time to complete every test: i want an unuseful progress bar :-)
function bar {
  lines=$( cat "${working_dir}/${1}" | wc -l)
  case $lines in
    1|2|3|4|5|6|7|8|9) ProgressBar 5 ;;
    10) ProgressBar 15 ;;
    11) ProgressBar 32 ;;
    12) ProgressBar 50 ;;
    13) ProgressBar 68 ;;
    14) ProgressBar 85 ;;
    15) ProgressBar 95 ;;
  esac
}

# get the path where is store report file, log and "run"
working_dir="$(cat /etc/burnin)"
conn=(ata1 ata2 ata3 ata4 ata5 ata6)

while :
do
    printf "\033c"
    echo
    echo "Burnin HDD control"
    echo
    i=1
    for sata in ${conn[*]}
    do
        dev[$i]=$(lsscsi -v | grep -B 1 "${sata}" | head -1 | awk 'NF>1{print $NF}' | cut -d "/" -f 3)
        if [ -n "${dev[${i}]}" ]; then
            active=$(systemctl is-active burnin@"${dev[$i]}".service)
            if [[ "${active}" == "active" ]]; then
              sn=$(smartctl -i /dev/"${dev[$i]}" | grep "Serial Number" | cut -d ":" -f 2 | sed -e 's/^[ \t]*//')
              since=$(systemctl status /dev/"${dev[$i]}" | grep "active (running)" | cut -d ")" -f 2 | sed -e 's/^[ \t]*//')
              echo "#${i} /dev/${dev[$i]} - ${sn} is running ${since}"
              bar "${sn}"
	      echo
	      echo
              pid[$i]=$(systemctl status burnin@"${dev[$i]}".service | grep "Main PID" | awk '{print $3}')
            fi
        else
            echo "#${i} empty or finished"
	    echo
        fi
        i=$((i+1))
    done
    echo
    read -r -t 10 -p $'Press Enter to refresh, or insert the number of the the device to show the log: ' num
    case $num in
      1|2|3|4|5|6)
        if [ -n "${dev[$num]}" ]; then
        printf "\033c"
        journalctl _PID="${pid[$num]}" -e -o json | jq -M -r '"\(.__REALTIME_TIMESTAMP | tonumber / 1000000) \(.MESSAGE)"' | awk '{ $1=strftime("%b %d %T", $1); print $0; fflush(); }' | less
        read -rsp $'Press enter to continue...\n'
        fi
        ;;
      "q")
        exit
        ;;
    esac
done
